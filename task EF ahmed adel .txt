using System.ComponentModel.DataAnnotations;

public class Student
{
    [Key]
    public int Id { get; set; }
    public string Name { get; set; }
    public int Age { get; set; }
    public string Address { get; set; }
}

public class Instructor
{
    [Key]
    public int Id { get; set; }
    public string Name { get; set; }
    public int Age { get; set; }
    public decimal Salary { get; set; }
    public string Address { get; set; }
}

public class School
{
    [Key]
    public int Id { get; set; }
    public string Name { get; set; }
    public string Location { get; set; }
}

public class Department
{
    [Key]
    public int Id { get; set; }
    public string Name { get; set; }
    public string Description { get; set; }
}
--------


using Microsoft.EntityFrameworkCore;

public class SchoolContext : DbContext
{
    public DbSet<Student> Students { get; set; }
    public DbSet<Instructor> Instructors { get; set; }
    public DbSet<School> Schools { get; set; }
    public DbSet<Department> Departments { get; set; }

    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
    {
        optionsBuilder.UseSqlServer("YourConnectionStringHere");
    }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        // Enable lazy loading
        foreach (var entity in modelBuilder.Model.GetEntityTypes())
        {
            entity.SetLazyLoadingEnabled(true);
        }

        // Set change tracking to no tracking by default
        ChangeTracker.QueryTrackingBehavior = QueryTrackingBehavior.NoTracking;
    }
}
------------

using System;
using System.Collections.Generic;
using System.Linq;

class Program
{
    static void Main(string[] args)
    {
        using (var context = new SchoolContext())
        {
            // Ensure the database is created
            context.Database.EnsureCreated();

            // Check if data exists to avoid duplicates
            if (!context.Students.Any() && !context.Instructors.Any() && !context.Schools.Any() && !context.Departments.Any())
            {
                // Sample data
                var students = new List<Student>
                {
                    new Student { Name = "Alice", Age = 20, Address = "123 Main St" },
                    new Student { Name = "Bob", Age = 22, Address = "456 Maple Ave" }
                };

                var instructors = new List<Instructor>
                {
                    new Instructor { Name = "Dr. Smith", Age = 45, Salary = 60000, Address = "789 Oak St" },
                    new Instructor { Name = "Prof. Johnson", Age = 50, Salary = 70000, Address = "101 Pine St" }
                };

                var schools = new List<School>
                {
                    new School { Name = "Greenwood High", Location = "New York" },
                    new School { Name = "Sunrise Academy", Location = "Los Angeles" }
                };

                var departments = new List<Department>
                {
                    new Department { Name = "Mathematics", Description = "Covers basic to advanced mathematics." },
                    new Department { Name = "Science", Description = "Focuses on physical and life sciences." }
                };

                // Add entities to the context
                context.Students.AddRange(students);
                context.Instructors.AddRange(instructors);
                context.Schools.AddRange(schools);
                context.Departments.AddRange(departments);

                // Save changes to the database
                context.SaveChanges();
            }

            // Query and display data
            var allStudents = context.Students.ToList();
            Console.WriteLine("Students:");
            foreach (var student in allStudents)
            {
                Console.WriteLine($"{student.Id}: {student.Name}, Age: {student.Age}, Address: {student.Address}");
            }

            var allInstructors = context.Instructors.ToList();
            Console.WriteLine("\nInstructors:");
            foreach (var instructor in allInstructors)
            {
                Console.WriteLine($"{instructor.Id}: {instructor.Name}, Age: {instructor.Age}, Salary: {instructor.Salary}, Address: {instructor.Address}");
            }

            var allSchools = context.Schools.ToList();
            Console.WriteLine("\nSchools:");
            foreach (var school in allSchools)
            {
                Console.WriteLine($"{school.Id}: {school.Name}, Location: {school.Location}");
            }

            var allDepartments = context.Departments.ToList();
            Console.WriteLine("\nDepartments:");
            foreach (var department in allDepartments)
            {
                Console.WriteLine($"{department.Id}: {department.Name}, Description: {department.Description}");
            }
        }
    }
}
